name: "Run benchmark"
on:
  pull_request_target:
    types: [assigned, opened, synchronize, reopened, edited]
  push:
    branches:
      - test
permissions:
  contents: write
  pull-requests: write
  issues: write
jobs:
  benchmark:
    runs-on: ubuntu-latest
    if: github.event.head_commit.message != 'Update performance results in README.md'
    strategy:
      matrix:
        service: [apollo_server, caliban, netflix_dgs, gqlgen, tailcall, async_graphql, hasura, graphql_jit]
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Build devcontainer and run setup and benchmark Test**
        uses: devcontainers/ci@v0.3
        with:
          imageName: graphql-benchmarks
          push: never
          runCmd: |
            echo "Running setup script"
            bash ./setup.sh
            echo "Setup completed"
            echo "Running benchmark for ${{ matrix.service }}"
            chmod +x ./run_benchmarks.sh
            valid_services=("apollo_server" "caliban" "netflix_dgs" "gqlgen" "tailcall" "async_graphql" "hasura" "graphql_jit")
            if [[ ! " ${valid_services[@]} " =~ " ${{ matrix.service }} " ]]; then
                echo "Error: Invalid service name '${{ matrix.service }}'"
                exit 1
            fi
            if ! ./run_benchmarks.sh ${{ matrix.service }}; then
                echo "Error: Benchmark failed for ${{ matrix.service }}"
                exit 1
            fi
            echo "Benchmark completed for ${{ matrix.service }}"


      - name: List benchmark files
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Matching bench*.txt files:"
          ls -la bench*.txt || echo "No matching files found"


      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: bench*.txt


  analyze:
    needs: benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4

      - name: Download all benchmark results
        uses: actions/download-artifact@v3
        with:
          name: benchmark-results
          path: .

      - name: List downloaded artifacts
        run: ls -R

      - name: Install gnuplot
        run: sudo apt-get update && sudo apt-get install -y gnuplot

      - name: Check gnuplot installation
        run: |
          cat << EOF > gnuplot_check.sh
          #!/bin/bash

          echo "Checking gnuplot installation..."

          # Check if gnuplot is installed
          if ! command -v gnuplot &> /dev/null; then
              echo "gnuplot is not installed or not in PATH"
              exit 1
          fi

          echo "gnuplot is installed. Version:"
          gnuplot --version

          echo "Attempting to generate a test plot..."

          # Create a simple data file
          echo "1 1
          2 4
          3 9
          4 16" > test_data.txt

          # Create a gnuplot script
          echo "set terminal png
          set output 'test_plot.png'
          plot 'test_data.txt' with lines" > test_plot.gp

          # Run gnuplot
          if gnuplot test_plot.gp; then
              echo "Successfully generated test_plot.png"
              ls -l test_plot.png
          else
              echo "Failed to generate plot"
              exit 1
          fi

          echo "Gnuplot check completed"
          EOF
          chmod +x ./gnuplot_check.sh
          ./gnuplot_check.sh

      - name: gnu test output
        run: ls -R


      - name: Analyze results
        run: |
          for bench in 1 2 3; do
            ls bench${bench}*.txt || echo "No matching files found for bench${bench}*.txt"
            echo "Processing files for bench${bench}:"
            bash analyze.sh bench${bench}*.txt
            echo bench${bench}*.txt
          done

      - name: Search for *.png files
        run: ls -R

      - name: Print benchmark results
        run: cat ./results.md

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request_target'
        uses: peter-evans/commit-comment@v3
        with:
          sha: ${{ github.event.pull_request.head.sha }}
          body-path: "results.md"
          reactions: eyes

      - name: Commit and push changes (on main branch)
        if: github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_author: Author <actions@github.com>
          commit_message: "Update performance results in README.md"
